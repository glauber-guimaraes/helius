t = "Hello"

iter = function(source)
    return {
        source = source,
        index = 0,
        current = none,
        next = function (self)
            if self.index == len(self.source) then
                return false
            end

            self.current = self.source[self.index]
            self.index = self.index + 1
            return true
        end,
    }
end

it = iter(t)
while it:next() do
    print(it.current)
end

it = iter([1,2,3,4,5])
while it:next() do
    print(it.current)
end

# When locals are implemented this should be available:
# The function iter returns a map like the one above
# for i in iter(t) do
#     print(i)
# end

# and the compiler should generate:
# local <Generated#0>it = iter(t) # This should use a name that is impossible to collide with user generated ones
# while <Generated#0>it.next() do
#     local i = <Generated#0>it.current
#     # Hereafter is the user defined block
#     print(i)
# end